
没有sudo怎么保存?
:w !sudo tee %

## 插件安装
git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
PluginInstall

Shift-Insert 粘贴文本（从剪贴板） *<S-Insert>*

CTRL-Insert 复制选择的文本（到剪贴板） *<C-Insert>*

CTRL-Del 剪切选择的文本（到剪贴板） *<C-Del>*

Shift-Del 剪切选择的文本（到剪贴板） *<S-Del>*

g/^\s*$/d 删除空行

vim sudo :
:w !sudo tee %
:q!

全部删除：按esc后，然后dG
全部复制：按esc后，然后ggyG

新建标签页
使用:tabe命令和文件名参数，可以在新标签页中打开指定的文件。也可以使用:tabnew命令，在新标签页中编辑新的文件。命令:tab split将在新标签页中，打开当前缓冲区中的文件。
命令:tabf允许你在当前目录搜索文件，并在新标签页中打开。比如我想打开当前目录下的img.txt文件，那么就可以使用:tabf img.*命令。请注意，此命令只能打开一个文件，如果搜索出多个匹配文件，将提示你“文件名过多”，这时你需要给出更精确的搜索条件以打开文件。
Vim默认最多只能打开10个标签页。你可以用set tabpagemax=15改变这个限制。
列示标签页
命令:tabs可以显示已打开标签页的列表，并用“>”标识出当前页面，用“+”标识出已更改的页面。
关闭标签页
命令:tabc可以关闭当前标签页。而命令:tabo将关闭所有的标签页。
切换标签页
命令:tabn或gt可以移动到下一个标签页。而命令:tabp或gT将移动到上一个标签页。如果已经到达最后面或最前面的标签页，将会自动转向循环。
如果你打开了很多标签页，那么可以使用:tabfirst或:tabr命令，移动到第一个标签页。使用:tablast命令，移动到最后一个标签页。
移动标签页
如果你希望按照指定的次序排列标签页，那么你可以使用:tabm命令。请注意，标签页次序是从0开始计数的。比如命令:tabm 1将把当前标签页移动到第2的位置。如果你没有为:tabm命令指定参数，那么当前标签页将会被移动到最后。
配置标签页
默认情况下，只有用户新建了标签页才会在窗口上方显示标签栏，这是由选项set showtabline=1决定的。如果我们希望总是显示标签栏，那么可以用set showtabline=2命令来设置。如果我们希望完全不显示标签栏，那么可以使用set showtabline=0来设置。
多标签页命令
使用:tabdo命令，我们可以同时在多个标签页中执行命令。比如我们打开了多个标签页，需要把这些文件中的“food”都替换成“drink”，那么就可以使用:tabdo %s/food/drink/g命令，一次完成对所有文件的替换操作，而不用针对每个文件重复操作。
图形界面
如果你使用的是带有图形界面的gVim，那么新建、关闭和打开标签页的操作，都可以通过在标签页上右击鼠标完成。只需要点击相应标签，就可以在不同的标签页间切换。
通过:help tab-page-intro命令，可以获得关于标签页使用的更多信息。
命令小结
:tabnew	新建标签页
:tabs	显示已打开标签页的列表
:tabc	关闭当前标签页
:tabn	移动到下一个标签页
:tabp	移动到上一个标签页
:tabfirst	移动到第一个标签页
:tablast	移动到最后一个标签页

<复制粘贴>
y 表示拷贝, d 表示删除, p 表示粘贴. 其中拷贝与删除是与光标移动命令
YY:复制整行
dd:删除整行
ddp:交换当前行和下一行
ggyG:表示复制整篇文档
ggdG:表示删除整篇文档
yw:表示拷贝从当前光标到光标所在单词结尾的内容.
dw:表示删除从当前光标到光标所在单词结尾的内容.
y0:表示拷贝从当前光标到光标所在行首的内容.
d0:表示删除从当前光标到光标所在行首的内容.
y$:表示拷贝从当前光标到光标所在行尾的内容.
d$:表示删除从当前光标到光标所在行尾的内容.
yfa:表示拷贝从当前光标到光标后面的第一个a字符之间的内容.
dfa:表示删除从当前光标到光标后面的第一个a字符之间的内容.



e! 重新加载当前文件
:%s/字符串//gn 统计字符串出现次数

VIM命令与配置
查找:
比如查找"abc"
/abc  #当前文本中查找
:vimgrep /abc/gj *.txt  #当前文件夹下查找所有txt文档
:vimgrep /abc/gj d:/test/*/*.txt
:vimgrep /abc/gj d:/test/**/*.txt
:cw #打开匹配的文件

光标跳转:
H M L 跳到屏幕的顶上 中间 下方
gg 跳至文件开始位置
G 跳至文件结束位置
10gg 跳至第10行
Ctrl-f 翻页
Crtl-b 翻页
^ 跳至行首
$ 跳至行尾

编辑:
shitf+v 选择当前行
y 复制
p 粘贴
d 剪贴
Shift-Insert 粘贴文本（从剪贴板） *<S-Insert>*
CTRL-Insert 复制选择的文本（到剪贴板） *<C-Insert>*
CTRL-Del 剪切选择的文本（到剪贴板） *<C-Del>*
Shift-Del 剪切选择的文本（到剪贴板） *<S-Del>*
g/^\s*$/d 删除空行
YY:复制整行
dd:删除整行
ddp:交换当前行和下一行
ggyG:表示复制整篇文档
ggdG:表示删除整篇文档
yw:表示拷贝从当前光标到光标所在单词结尾的内容.
dw:表示删除从当前光标到光标所在单词结尾的内容.
y0:表示拷贝从当前光标到光标所在行首的内容.
d0:表示删除从当前光标到光标所在行首的内容.
y$:表示拷贝从当前光标到光标所在行尾的内容.
d$:表示删除从当前光标到光标所在行尾的内容.
yfa:表示拷贝从当前光标到光标后面的第一个a字符之间的内容.
dfa:表示删除从当前光标到光标后面的第一个a字符之间的内容.

标签:
:tabnew 新建标签页
:tabs   显示已打开标签页的列表
:tabc   关闭当前标签页
:tabn   移动到下一个标签页
:tabp   移动到上一个标签页
:tabfirst   移动到第一个标签页
:tablast    移动到最后一个标签页

添加到右键VIM(注意路径)
Windows Registry Editor Version 5.00
[HKEY_CLASSES_ROOT\*\shell\Vim]
@="Vim"
[HKEY_CLASSES_ROOT\*\shell\Vim\command]
@="\"D:\\Program\\vim\\vim73\\gvim.exe\" -p --remote-tab-silent \"%1\""

my ".vimrc"
"编码
set encoding=utf-8
set langmenu=zh_CN.UTF-8
language message zh_CN.UTF-8
set fileencodings=UTF-8,GBK,GB2312

"偏好
colorscheme desert
syntax on
syntax enable
autocmd GUIEnter * simalt ~x
set autochdir
set autoindent
set autoread
set autowrite
set backspace=indent,eol,start
set backupcopy=yes
set cindent
set clipboard+=unnamed
set completeopt=preview,menu
set foldmethod=manual
set gdefault
set guioptions-=m
set guioptions-=T
set hidden
set history=500
set hlsearch
set incsearch
set matchtime=1
set magic
set nobackup
set nocompatible
set noswapfile
set nu
set ruler
set scrolloff=3
set shiftwidth=4
set showcmd
set showmatch
set smartindent
set softtabstop=4
set syntax=on
set tabstop=4
set wildmenu

"自动完成
:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>
:inoremap { {}<ESC>i
:inoremap } <c-r>=ClosePair('}')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
:inoremap < <><ESC>i
:inoremap > <c-r>=ClosePair('>')<CR>
":inoremap " ""<ESC>i
":inoremap ' ''<ESC>i
function ClosePair(char)
    if getline('.')[col('.') - 1] == a:char
        return "\<Right>"
    else
        return a:char
    endif
endf

"允许插件
filetype plugin on
filetype on
filetype indent on

"快捷键
map <C-s> <ESC>:w<CR>
map <C-w> :tabclose<CR>
map <C-n> :tabnew<CR>
map <C-Tab> :tabn<CR>
map <C-o> :browse tabnew<CR>
map <C-q> :NERDTreeToggle<CR>

"文件类型
set rtp+=$GOROOT/misc/vim
au BufRead,BufNewFile *.go set filetype=go
autocmd BufWritePre *.go Fmt
map <C-F11> :w<cr>:!go run %<cr>
imap <A-/> <C-x><C-o>




私密：VIM下的跳转练习
发表于 2013-05-26
from http://www.cnblogs.com/moiyer/archive/2010/04/01/1952681.html
< type="text/javascript"> document.body.oncopy = function() { if (window.clipboardData) { setTimeout(function() { var text =  clipboardData.getData("text"); if (text && text.length > 300) { text = text + "rnn本文来自CSDN博客，转载请标明出处：" + location.href; clipboardData.setData("text", text); } }, 100); } }
在vim下可以使用常用的箭头键
但是 还有其它键可以让你更快的达到目标
hjkl 这是代替箭头键功能的
H M L 跳到屏幕的顶上 中间 下方
w 跳到下一个单词的开始
e 跳到单词的结束
b 向后跳
gg 跳到文件的开始
G 跳到文件的结束
10gg 或10G 跳到第10行
ta 跳到下一个a 前面
fa 跳到下一个a
大写的意思相反
另外还有%(跳到文件的%多少) 和|(跳到第几列) 不过我很少用
上面的都可以加上数字前缀 表示第几个匹配
另外看文件时 除了pageup pagedown外还有其它的快速键
如CTRL-F 向前一页 CTRL-B 向后一页
上面不是重要的
CTRL-D 向下半页 CTRL-U 向上半页我觉得更实用 这样看文章时就不会跳转出错
另外还有
CTRL-E 向下一行
CTRL-Y 向上一行
^ 行首
$行尾
0 第一个字符
另外上面也作为vim其它命令的定位符 如删除d
dt)
一直删除到这行的)
另外 懂了跳转键后 那删除或是复制时就不再是以行为单位了 可以指定到某个条件
我觉得这是新手成长的必要方法
另外还有ctrl-t ctrl-i ctrl-]
如果已经使用了ctags 或是cscope创建索引文件的话 那看代码时很是方便
跳转到函数、变量定义处：
[+ctrl+i 跳转到函数、变量和#define
[+ctrl+d 跳转到#define处
ctrl+i 向前跳到前几次光标位置
ctrl+o 向后跳到后几次光标位置
函数体跳转：
[[
]]
[]
][
{}
2009-07-07 17:31 补充
如何选中括号中的内容 进行：
将光标移至括号内，按shift+v进入行选模式，然后
i｛ － 选小括号中内容，不包括小括号
a｛ － 选小括号中内容，包括小括号
ib － 选中括号中内容，不包括括号
ab － 选中括号中内容，包括括号
i｛ － 选大括号中内容，不包括大括号
a｛ － 选大括号中内容，包括大括号
:h text-objects
下面还有些相关的tips，未全部验证：
vi{ 选中{}中间的内容,不包括{}
va{ 选中{}中间内容，包括{}
vi( 选中()中间内容
vi< 选中<>中间内容
vi[ 选中[]中间内容
vit 选中中间的内容
vi” 选中”"中间内容
vi’ 选中”中间的内容
vis 选中一个句子
vib 选中一个block
viw选中一个单词
vip 选中一个段落
在normal模式下光标停在某个字符上ga可以查看该字符的ascii码
#复制删除粘贴的操作：按V（shift+v），进入可视模式，jk上下选择需要的行，然后按
y 复制
d 删除
x 剪切
p 粘贴
可视模式很好用，例如想把两行的所有单词变成小写，按V然后按j或k选中这两行，按gu即可
#跳到行首按0，但实际更好用的是^, 跳到行首非空白字符
#折行前空出4字符显示折行标识
set foldcolumn=4
#折叠或展开（在折叠的那一行左右移动光标也可展开折叠）
za
#删除光标所在行所处的范围的折叠
zd
#当在:set foldmethod=marker后，折行会把{{{和}}}之间的内容折叠
#不在单词中间断行。 设置了这个选项后， 如果一行文字非常长， 无法在一行内显示完的话，
它会在单词与单词间的空白处断开， 尽量不会把一个单词分成两截放在两个不同的行里。
set lbr
#sw是shiftwidth的缩写，表缩进列数
fx把光标移动到该行的下个x字符上，这个x也可以是一个汉字，;重复fx操作。Fx把光标移动到该行的上一个x字符上。
gg光标定位到第一行开头，G定位到最后一行开头
H光标跳到当前窗口显示文本的第一行
M光标跳到当前窗口显示文本的中间一行
L光标跳到当前窗口显示文本的最后一行
g*查找包含当前单词的所有单词(*只查找与当前单词精确匹配的单词)，
-d光标下跳半屏，文本上滚半屏
-u光标上跳半屏，文本下滚半屏
-e文本向上滚动一行
zz屏幕滚动使得当前行成为屏幕的中间一行
normal模式下按J删除此行末尾的换行符,从而合并两行
:e!重新读进上次保存的此文件内容
:ab myname william_djj
以后再编辑时键入myname，然后空格或回车myname串就会被william_djj代替
:r !date
在当前位置插入系统时间（linux下的date命令），同理当前位置插入某文件的内容就是
:r filename
:set ignorecase
查找时取消case sensitive
:set noignorecase
查找时case sensitive
############ 使用tags ###################
以下命令递归当前目录下的所有文件创建tags文件
ctags -R .
vim打开当前目录下的任意一文件，命令模式下键入下面语句以指定刚才创建的tags的位置，以后就可以在不同文件间查阅函数
set tags=..tags
#分割窗口显示当前函数的定义
-w ]
##########################################
如果插件目录下有echofunc.vim，用以下命令生成tags，以后编辑代码函数名后打“（“时有参数提示。
$ ctags -R –fields=+lS .
:Tlist打开左边一个taglist的窗口，显示symbols。要注意的是在windows下如果tags文件路径中有空格或中文会报找不到tags文件的错误,
+w+w 或者+w+left/right 窗口切换
+] 进入光标所指的symbol的定义（如果用鼠标也是+鼠标左键，跟SI的用法一样）
+t 返回第一个用+t 跳转位置,注意+o是跳回上一个视图，而+t是跳回上一次按+]的位置
#以下命令分裂出一个窗口显示定义处
ptag 函数名
#以下命令关闭刚才打开的分裂窗口
pclose
#垂直分裂窗口打开一文件
vsplit 文件名
#水平分裂窗口打开一文件
split 文件名
变量名写成
ame表示匹配模式
停在某个括号上按%，跳到匹配的括号处，#if跳到匹配的#else或#endif处
set fdm=syntax折叠函数体
双击]往后逐个函数跳读，双击[往前逐个函数跳读
#解决乱码
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
#在vim下对比两个文件,原来打开了fnpro.c,现在和fnpro.c.bak对比
#垂直分割
:vert diffsplit fnpro.c.bak
#水平分割
:diffsplit fnpro.c.bak
#跳到下一个不同之处
:]c
#跳到上一个不同之处
:[c
#展开折叠:zo
#折叠:zc
#不论何种情况下－o都可以上一次跳转的地方
#查看变量和函数的申明
[i
#以下为查看vim环境参数makeprg的值的例子:
:set makeprg?
#重新对文件代码进行缩进
gg=G
跳 转 到函数 、变量定义处：
[+ctrl+i 跳 转 到函数 、变量和#define
[+ctrl+d 跳 转 到#define处
ctrl+i 向前跳 到前几次光标位置
ctrl+o 向后跳 到后几次光标位置
函数 体跳 转 ：
[[
]]
[]
][
{}
2009-07-07 17:31 补充
如何选中括号中的内容 进行：
将光标移至括号内，按shift+v进入行选模式，然后
i｛ － 选小括号中内容，不包括小括号
a｛ － 选小括号中内容，包括小括号
ib － 选中括号中内容，不包括括号
ab － 选中括号中内容，包括括号
i｛ － 选大括号中内容，不包括大括号
a｛ － 选大括号中内容，包括大括号
:h text-objects
下面还有些相关的tips，未全部验证：
vi{ 选中{}中间的内容,不包括{}
va{ 选中{}中间内容，包括{}
vi( 选中()中间内容
vi< 选中<>中间内容
vi[ 选中[]中间内容
vit 选中中间的内容
vi” 选中”"中间内容
vi’ 选中”中间的内容
vis 选中一个句子
vib 选中一个block
viw选中一个单词
vip 选中一个段落
vim文件跳转
如果使用vim 打开了多个文件 ，如vim file1 file2 … fileN
可以通过
:n 或 :prev来跳转 到前一个或者后一个文件
还可以通过
:first或:last来跳转到第一个和最后一个文件
如果你只打开一个文件，如vim file1
然后在使用过程中，通过
:e file2编辑了第二个文件，这时, :prev是不起作用的
可以用
:e#返回上一个编辑的文件
无论哪两种方式都可以用
:bN跳转到打开的第N个文件
如:b1跳转到第一个打开的文件

私密：简明 Vim 练级攻略
发表于 2013-05-26
from http://coolshell.cn/articles/5426.html
vim的学习曲线相当的大（参看各种文本编辑器的学习曲线），所以，如果你一开始看到的是一大堆VIM的命令分类，你一定会对这个编辑器失去兴趣的。下面的文章翻译自《Learn Vim Progressively》，我觉得这是给新手最好的VIM的升级教程了，没有列举所有的命令，只是列举了那些最有用的命令。非常不错。
——————————正文开始——————————
你想以最快的速度学习人类史上最好的文本编辑器VIM吗？你先得懂得如何在VIM幸存下来，然后一点一点地学习各种戏法。
Vim the Six Billion Dollar editor
Better, Stronger, Faster.
学习 vim 并且其会成为你最后一个使用的文本编辑器。没有比这个更好的文本编辑器了，非常地难学，但是却不可思议地好用。
我建议下面这四个步骤：
存活
感觉良好
觉得更好，更强，更快
使用VIM的超能力
当你走完这篇文章，你会成为一个vim的 superstar。
在开始学习以前，我需要给你一些警告：
学习vim在开始时是痛苦的。
需要时间
需要不断地练习，就像你学习一个乐器一样。
不要期望你能在3天内把vim练得比别的编辑器更有效率。
事实上，你需要2周时间的苦练，而不是3天。
第一级 – 存活

安装 vim
启动 vim
什么也别干！请先阅读
当你安装好一个编辑器后，你一定会想在其中输入点什么东西，然后看看这个编辑器是什么样子。但vim不是这样的，请按照下面的命令操作：
启 动Vim后，vim在 Normal 模式下。
让我们进入 Insert 模式，请按下键 i 。(陈皓注：你会看到vim左下角有一个–insert–字样，表示，你可以以插入的方式输入了）
此时，你可以输入文本了，就像你用“记事本”一样。
如果你想返回 Normal 模式，请按 ESC 键。
现在，你知道如何在 Insert 和 Normal 模式下切换了。下面是一些命令，可以让你在 Normal 模式下幸存下来：
i → Insert 模式，按 ESC 回到 Normal 模式.
x → 删当前光标所在的一个字符。
:wq → 存盘 + 退出 (:w 存盘, :q 退出)   （陈皓注：:w 后可以跟文件名）
dd → 删除当前行，并把删除的行存到剪贴板里
p → 粘贴剪贴板
推荐:
hjkl (强例推荐使用其移动光标，但不必需) →你也可以使用光标键 (←↓↑→). 注: j 就像下箭头。
:help <command> → 显示相关命令的帮助。你也可以就输入 :help 而不跟命令。（陈皓注：退出帮助需要输入:q）
你能在vim幸存下来只需要上述的那5个命令，你就可以编辑文本了，你一定要把这些命令练成一种下意识的状态。于是你就可以开始进阶到第二级了。
当是，在你进入第二级时，需要再说一下 Normal 模式。在一般的编辑器下，当你需要copy一段文字的时候，你需要使用 Ctrl 键，比如：Ctrl-C。也就是说，Ctrl键就好像功能键一样，当你按下了功能键Ctrl后，C就不在是C了，而且就是一个命令或是一个快键键了，在VIM的Normal模式下，所有的键就是功能键了。这个你需要知道。
标记:
下面的文字中，如果是 Ctrl-λ我会写成 <C-λ>.
以 : 开始的命令你需要输入 <enter>回车，例如 — 如果我写成 :q 也就是说你要输入 :q<enter>.
第二级 – 感觉良好

上面的那些命令只能让你存活下来，现在是时候学习一些更多的命令了，下面是我的建议：（陈皓注：所有的命令都需要在Normal模式下使用，如果你不知道现在在什么样的模式，你就狂按几次ESC键）
各种插入模式
a → 在光标后插入
o → 在当前行后插入一个新行
O → 在当前行前插入一个新行
cw → 替换从光标所在位置后到一个单词结尾的字符
简单的移动光标
0 → 数字零，到行头
^ → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）
$ → 到本行行尾
g_ → 到本行最后一个不是blank字符的位置。
/pattern → 搜索 pattern 的字符串（陈皓注：如果搜索出多个匹配，可按n键到下一个）
拷贝/粘贴 （陈皓注：p/P都可以，p是表示在当前位置之后，P表示在当前位置之前）
P → 粘贴
yy → 拷贝当前行当行于 ddP
Undo/Redo
u → undo
<C-r> → redo
打开/保存/退出/改变文件(Buffer)
:e <path/to/file> → 打开一个文件
:w → 存盘
:saveas <path/to/file> → 另存为 <path/to/file>
 :x ， ZZ 或 :wq → 保存并退出 ( :x 表示仅在需要时保存，ZZ不需要输入冒号并回车)
:q! → 退出不保存 :qa! 强行退出所有的正在编辑的文件，就算别的文件有更改。
:bn 和 :bp → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。（陈皓注：我喜欢使用:n到下一个文件）
花点时间熟悉一下上面的命令，一旦你掌握他们了，你就几乎可以干其它编辑器都能干的事了。但是到现在为止，你还是觉得使用vim还是有点笨拙，不过没关系，你可以进阶到第三级了。
第三级 – 更好，更强，更快

先恭喜你！你干的很不错。我们可以开始一些更为有趣的事了。在第三级，我们只谈那些和vi可以兼容的命令。
更好
下面，让我们看一下vim是怎么重复自己的：
. → (小数点) 可以重复上一次的命令
N<command> → 重复某个命令N次
下面是一个示例，找开一个文件你可以试试下面的命令：
2dd → 删除2行
3p → 粘贴文本3次
100idesu [ESC] → 会写下 “desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu desu “
. → 重复上一个命令—— 100 “desu “.
3. → 重复 3 次 “desu” (注意：不是 300，你看，VIM多聪明啊).
更强
你要让你的光标移动更有效率，你一定要了解下面的这些命令，千万别跳过。
NG → 到第 N 行 （陈皓注：注意命令中的G是大写的，另我一般使用 : N 到第N行，如 :137 到第137行）
gg → 到第一行。（陈皓注：相当于1G，或 :1）
G → 到最后一行。
按单词移动：
> 如果你认为单词是由默认方式，那么就用小写的e和w。默认上来说，一个单词由字母，数字和下划线组成（陈皓注：程序变量）
> 如果你认为单词是由blank字符分隔符，那么你需要使用大写的E和W。（陈皓注：程序语句）
w → 到下一个单词的开头。
e → 到下一个单词的结尾。
下面，让我来说说最强的光标移动：
% : 匹配括号移动，包括 (, {, [. （陈皓注：你需要把光标先移到括号上）
* 和 #:  匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配单词（*是下一个，#是上一个）
相信我，上面这三个命令对程序员来说是相当强大的。
更快
你一定要记住光标的移动，因为很多命令都可以和这些移动光标的命令连动。很多命令都可以如下来干：
<start position><command><end position>
例如 0y$ 命令意味着：
0 → 先到行头
y → 从这里开始拷贝
$ → 拷贝到本行最后一个字符
你可可以输入 ye，从当前位置拷贝到本单词的最后一个字符。
你也可以输入 y2/foo 来拷贝2个 “foo” 之间的字符串。
还有很多时间并不一定你就一定要按y才会拷贝，下面的命令也会被拷贝：
d (删除 )
v (可视化的选择)
gU (变大写)
gu (变小写)
等等
（陈皓注：可视化选择是一个很有意思的命令，你可以先按v，然后移动光标，你就会看到文本被选择，然后，你可能d，也可y，也可以变大写等）
第四级 – Vim 超能力

你只需要掌握前面的命令，你就可以很舒服的使用VIM了。但是，现在，我们向你介绍的是VIM杀手级的功能。下面这些功能是我只用vim的原因。
在当前行上移动光标: 0 ^ $ f F t T , ;
0 → 到行头
^ → 到本行的第一个非blank字符
$ → 到行尾
g_ → 到本行最后一个不是blank字符的位置。
fa → 到下一个为a的字符处，你也可以fs到下一个为s的字符。
t, → 到逗号前的第一个字符。逗号可以变成其它字符。
3fa → 在当前行查找第三个出现的a。
F 和 T → 和 f 和 t 一样，只不过是相反方向。
还有一个很有用的命令是 dt" → 删除所有的内容，直到遇到双引号—— "。
区域选择 <action>a<object> 或 <action>i<object>
在visual 模式下，这些命令很强大，其命令格式为
<action>a<object> 和 <action>i<object>
action可以是任何的命令，如 d (删除), y (拷贝), v (可以视模式选择)。
object 可能是： w 一个单词， W 一个以空格为分隔的单词， s 一个句字， p 一个段落。也可以是一个特别的字符："、 '、 )、 }、 ]。
假设你有一个字符串 (map (+) ("foo")).而光标键在第一个 o 的位置。
vi" → 会选择 foo.
va" → 会选择 "foo".
vi) → 会选择 "foo".
va) → 会选择("foo").
v2i) → 会选择 map (+) ("foo")
v2a) → 会选择 (map (+) ("foo"))
块操作: <C-v>
块操作，典型的操作： 0 <C-v> <C-d> I-- [ESC]
^ → 到行头
<C-v> → 开始块操作
<C-d> → 向下移动 (你也可以使用hjkl来移动光标，或是使用%，或是别的)
I-- [ESC] → I是插入，插入“--”，按ESC键来为每一行生效。
在Windows下的vim，你需要使用 <C-q> 而不是 <C-v> ，<C-v> 是拷贝剪贴板。
自动提示： <C-n> 和 <C-p>
在 Insert 模式下，你可以输入一个词的开头，然后按 <C-p>或是<C-n>，自动补齐功能就出现了……
宏录制： qa 操作序列 q, @a, @@
qa 把你的操作记录在寄存器 a。
于是 @a 会replay被录制的宏。
@@ 是一个快捷键用来replay最新录制的宏。
示例
在一个只有一行且这一行只有“1”的文本中，键入如下命令：
qaYp<C-a>q→
qa 开始录制
Yp 复制行.
<C-a> 增加1.
q 停止录制.
@a → 在1下面写下 2
@@ → 在2 正面写下3
现在做 100@@ 会创建新的100行，并把数据增加到 103.
可视化选择： v,V,<C-v>
前面，我们看到了 <C-v>的示例 （在Windows下应该是<C-q>），我们可以使用 v 和 V。一但被选好了，你可以做下面的事：
J → 把所有的行连接起来（变成一行）
< 或 > → 左右缩进
= → 自动给缩进 （陈皓注：这个功能相当强大，我太喜欢了）
在所有被选择的行后加上点东西：
<C-v>
选中相关的行 (可使用 j 或 <C-d> 或是 /pattern 或是 % 等……)
$ 到行最后
A, 输入字符串，按 ESC。
分屏: :split 和 vsplit.
下面是主要的命令，你可以使用VIM的帮助 :help split. 你可以参考本站以前的一篇文章VIM分屏。
:split → 创建分屏 (:vsplit创建垂直分屏)
<C-w><dir> : dir就是方向，可以是 hjkl 或是 ←↓↑→ 中的一个，其用来切换分屏。
<C-w>_ (或 <C-w>|) : 最大化尺寸 (<C-w>| 垂直分屏)
<C-w>+ (或 <C-w>-) : 增加尺寸
结束语

上面是作者最常用的90%的命令。
我建议你每天都学1到2个新的命令。
在两到三周后，你会感到vim的强大的。
有时候，学习VIM就像是在死背一些东西。
幸运的是，vim有很多很不错的工具和优秀的文档。
运行vimtutor直到你熟悉了那些基本命令。
其在线帮助文档中你应该要仔细阅读的是 :help usr_02.txt.
你会学习到诸如  !， 目录，寄存器，插件等很多其它的功能。
学习vim就像学弹钢琴一样，一旦学会，受益无穷。
——————————正文结束——————————
